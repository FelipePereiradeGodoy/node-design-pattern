# üìê Design Patterns em Programa√ß√£o

Este reposit√≥rio tem como objetivo documentar os principais **Design Patterns** (Padr√µes de Projeto) da programa√ß√£o e fornecer exemplos simples de implementa√ß√£o para cada um deles.

---

## üî® Padr√µes Criacionais

> Focados em como objetos s√£o criados e gerenciados.

| Padr√£o             | Problema que resolve |
|--------------------|----------------------|
| **Singleton**      | Garante que uma classe tenha **apenas uma inst√¢ncia** e fornece um ponto global de acesso a ela. |
| **Factory Method** | Permite que subclasses decidam **qual objeto instanciar**, delegando a cria√ß√£o para subclasses. |
| **Abstract Factory** | Fornece uma interface para criar **fam√≠lias de objetos relacionados**, sem depender de suas classes concretas. |
| **Builder**        | Separa a constru√ß√£o de um objeto complexo da sua representa√ß√£o, permitindo **constru√ß√µes passo a passo**. |
| **Prototype**      | Permite copiar objetos existentes (clonar), ideal quando a **cria√ß√£o do objeto √© custosa** ou complexa. |

---

## üß± Padr√µes Estruturais

> Focados em como classes e objetos se comp√µem para formar estruturas maiores.

| Padr√£o         | Problema que resolve |
|----------------|----------------------|
| **Adapter**    | Permite que duas interfaces **incompat√≠veis colaborem**, convertendo uma interface em outra esperada. |
| **Decorator**  | Adiciona **responsabilidades a um objeto dinamicamente**, como alternativa flex√≠vel √† heran√ßa. |
| **Facade**     | Fornece uma **interface simplificada** para um conjunto de subsistemas complexos. |
| **Composite**  | Permite tratar **objetos individuais e composi√ß√µes de objetos** de forma uniforme (√°rvores). |
| **Proxy**      | Fornece um substituto ou representante de outro objeto para **controlar o acesso** a ele. |
| **Bridge**     | Separa uma abstra√ß√£o de sua implementa√ß√£o, permitindo **varia√ß√£o independente** das duas. |
| **Flyweight**  | Reduz o uso de mem√≥ria compartilhando o m√°ximo poss√≠vel de dados com objetos semelhantes. Ideal para **muitos objetos parecidos**. |

---

## üß† Padr√µes Comportamentais

> Focados na **comunica√ß√£o entre objetos** e no fluxo de controle.

| Padr√£o               | Problema que resolve |
|----------------------|----------------------|
| **Observer**         | Permite que m√∫ltiplos objetos sejam **notificados automaticamente** quando o estado de outro objeto mudar. |
| **Strategy**         | Permite definir uma fam√≠lia de algoritmos, encapsul√°-los e torn√°-los **intercambi√°veis** em tempo de execu√ß√£o. |
| **Command**          | Encapsula uma solicita√ß√£o como um objeto, permitindo **parametrizar a√ß√µes**, enfileirar ou desfazer opera√ß√µes. |
| **State**            | Permite que um objeto **mude seu comportamento** quando seu estado interno muda. |
| **Template Method**  | Define o **esqueleto de um algoritmo** na superclasse, permitindo que subclasses alterem partes espec√≠ficas. |
| **Mediator**         | Reduz o acoplamento entre objetos, fazendo com que se comuniquem por meio de um **objeto central** (mediador). |
| **Chain of Responsibility** | Permite passar uma solicita√ß√£o por uma **cadeia de manipuladores**, onde cada um pode tratar ou passar adiante. |
| **Iterator**         | Fornece um meio de **acessar os elementos** de um objeto agregado sequencialmente, sem expor sua estrutura. |
| **Visitor**          | Permite **adicionar novas opera√ß√µes** a objetos sem alterar suas classes. Ideal para estruturas de dados complexas. |
| **Interpreter**      | Fornece uma maneira de avaliar linguagens ou express√µes usando um conjunto de regras gramaticais. |

---

## üõ†Ô∏è Objetivo

üìÅ Cada padr√£o ter√° sua pr√≥pria pasta com:
- Um exemplo simples de implementa√ß√£o;
- Coment√°rios explicativos;
- Situa√ß√µes pr√°ticas onde pode ser aplicado.

---

## üì¨ Contribua!

Pull requests s√£o bem-vindos! Se tiver exemplos, corre√ß√µes ou melhorias, sinta-se √† vontade para colaborar. üöÄ

